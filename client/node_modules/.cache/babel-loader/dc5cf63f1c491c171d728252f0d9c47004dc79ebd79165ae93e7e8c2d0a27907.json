{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samah\\\\OneDrive\\\\Desktop\\\\mernproject\\\\client\\\\src\\\\Info.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Table, Button, DropdownButton, Dropdown, Form } from \"react-bootstrap\";\nimport moment from 'moment';\n\n/**\r\n * Component to display user information\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Info() {\n  _s();\n  const api = \"http://127.0.0.1:3001\";\n  const [users, setUsers] = useState([]); // State variable to store user data\n  const [selectedType, setSelectedType] = useState(\"all\"); // State variable to store the currently selected user type\n  const [selectedUsers, setSelectedUsers] = useState([]); // State variable to store the currently selected users to delete\n  const [selectedUser, setSelectedUser] = useState(null); // State variable to store the ID of the user being edited\n  const [editName, setEditName] = useState(\"\");\n  const [editEmail, setEditEmail] = useState(\"\");\n  const [editPhone, setEditPhone] = useState(\"\");\n  const [editType, setEditType] = useState(\"\");\n  const [editCategory, setEditCategory] = useState(\"\");\n  const [editImage, setEditImage] = useState(null);\n  const [selectedFile, setSelectedFile] = useState(null); // State variable to store the selected image file\n\n  useEffect(() => {\n    Axios.get(`${api}/users`).then(res => {\n      // Send GET request to /users endpoint to retrieve user data\n      setUsers(res.data); // Update state variable with retrieved data\n    });\n  }, []);\n\n  /**\r\n   * Function to open image URL in a new window\r\n   * @param imageUrl - URL of the image to open\r\n   */\n  const openImage = image => {\n    window.open(image, \"_blank\"); // Open image URL in a new window when user clicks \"View Image\" button\n  };\n\n  /**\r\n   * Function to handle user type selection from dropdown menu\r\n   * @param type - Selected user type\r\n   */\n  const handleTypeSelect = type => {\n    setSelectedType(type); // Update state variable with the selected user type\n  };\n\n  /**\r\n   * Function to handle checkbox selection\r\n   * @param id - ID of the user to select or deselect\r\n   */\n  const handleCheckboxSelect = id => {\n    if (selectedUsers.includes(id)) {\n      setSelectedUsers(selectedUsers.filter(userId => userId !== id)); // remove user from the selected users array if it is already selected\n    } else {\n      setSelectedUsers([...selectedUsers, id]); // add user to the selected users array if it is not already selected\n    }\n  };\n\n  const filteredUsers = selectedType === \"all\" ? users : users.filter(user => user.type === selectedType); // Filter user data based on selected user type\n\n  /**\r\n   * Function to delete selected users from the table and the database\r\n   */\n  const deleteSelectedUsers = () => {\n    Axios.delete(`${api}/users`, {\n      data: {\n        ids: selectedUsers\n      }\n    }).then(res => {\n      // Send DELETE request to /users endpoint to delete selected users from the database\n      setUsers(users.filter(user => !selectedUsers.includes(user._id))); // Update state variable with updated user data after deletion\n      setSelectedUsers([]);\n    });\n  };\n\n  /**\r\n   * Function to handle editing user information\r\n   * @param id - ID of the user being edited\r\n   */\n  const handleEdit = id => {\n    setSelectedUser(id); // Set the ID of the user being edited\n    const user = users.find(user => user._id === id); // Find the user data for the selected user\n    setEditName(user.name);\n    setEditEmail(user.email);\n    setEditPhone(user.phone);\n    setEditType(user.type);\n    setEditCategory(user.category || user.employeeType || moment(user.date).format('MM/DD/YYYY'));\n    setEditImage(null); // Reset the image field to null\n  };\n\n  /**\r\n   * Function to handle changes to the name field in the edit form\r\n   * @param e - Event object\r\n   */\n  const handleNameChange = e => {\n    setEditName(e.target.value); // Update state variable with the new name value\n  };\n\n  /**\r\n   * Function to handle changes to the email field in the edit form\r\n   * @param e - Event object\r\n   */\n  const handleEmailChange = e => {\n    setEditEmail(e.target.value); // Update state variable with the new email value\n  };\n\n  /**\r\n   * Function to handle changes to the phone field in the edit form\r\n   * @param e - Event object\r\n   */\n  const handlePhoneChange = e => {\n    setEditPhone(e.target.value); // Update state variable with the new phone value\n  };\n\n  /**\r\n   * Function to handle changes to the type field in the edit form\r\n   * @param e - Event object\r\n   */\n  const handleTypeChange = e => {\n    setEditType(e.target.value); // Update state variable with the new type value\n  };\n\n  /**\r\n   * Function to handle changes to the category field in the edit form\r\n   * @param e - Event object\r\n   */\n  const handleCategoryChange = e => {\n    setEditCategory(e.target.value); // Update state variable with the new category value\n  };\n\n  /**\r\n   * Function to handle image file selection\r\n   * @param e - Event object\r\n   */\n  const handleFileSelect = e => {\n    setSelectedFile(e.target.files[0]); // Update state variable with the selected image file\n  };\n\n  /**\r\n   * Function to handle image file upload\r\n   */\n  const handleFileUpload = () => {\n    const formData = new FormData(); // Create a new FormData object\n    formData.append(\"image\", selectedFile); // Append the selected image file to the form data\n    Axios.post(`${api}/upload`, formData).then(res => {\n      // Send POST request to /upload endpoint to upload the image file\n      setEditImage(res.data.url); // Update state variable with the URL of the uploaded image\n      setSelectedFile(null); // Reset the selected file state variable\n    });\n  };\n\n  /**\r\n   * Function to handle submission of the edit form\r\n   * @param e - Event object\r\n   */\n  const handleSubmit = e => {\n    e.preventDefault();\n    Axios.put(`${api}/users/${selectedUser}`, {\n      // Send PUT request to /users/:id endpoint to update the user data\n      name: editName,\n      email: editEmail,\n      phone: editPhone,\n      type: editType,\n      category: editCategory,\n      image: editImage // Pass the image URL to the server if it has been updated\n    }).then(res => {\n      setUsers(users.map(user => {\n        // Update state variable with the updated user data\n        if (user._id === selectedUser) {\n          return res.data;\n        }\n        return user;\n      }));\n      setSelectedUser(null); // Reset the selected user state variable\n      setEditName(\"\");\n      setEditEmail(\"\");\n      setEditPhone(\"\");\n      setEditType(\"\");\n      setEditCategory(\"\");\n      setEditImage(null);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-3 d-flex justify-content-end\",\n        children: /*#__PURE__*/_jsxDEV(DropdownButton, {\n          id: \"dropdown-basic-button\",\n          title: `Filter by Type: ${selectedType}`,\n          children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            onClick: () => handleTypeSelect(\"all\"),\n            children: \"All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            onClick: () => handleTypeSelect(\"student\"),\n            children: \"Student\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            onClick: () => handleTypeSelect(\"graduate\"),\n            children: \"Graduate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            onClick: () => handleTypeSelect(\"employee\"),\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        className: \"my-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                type: \"checkbox\",\n                onChange: e => {\n                  if (e.target.checked) {\n                    setSelectedUsers(filteredUsers.map(user => user._id)); // select all visible users if the \"Select All\" checkbox is checked\n                  } else {\n                    setSelectedUsers([]); // deselect all visible users if the \"Select All\" checkbox is unchecked\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Phone\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Addtional Information\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: filteredUsers.map(user => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                type: \"checkbox\",\n                checked: selectedUsers.includes(user._id),\n                onChange: () => handleCheckboxSelect(user._id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.phone\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.category || user.employeeType || moment(user.date).format('MM/DD/YYYY')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                onClick: () => openImage(user.image),\n                children: \"View Image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 19\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"warning\",\n                onClick: () => handleEdit(user._id),\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 19\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 17\n            }, this)]\n          }, user._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), selectedUsers.length > 0 && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"danger\",\n        onClick: deleteSelectedUsers,\n        children: \"Delete Selected Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this), selectedUser && /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formName\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            value: editName,\n            onChange: e => setEditName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formEmail\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            value: editEmail,\n            onChange: e => setEditEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formPhone\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Phone\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            value: editPhone,\n            onChange: e => setEditPhone(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formType\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            value: editType,\n            onChange: e => setEditType(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"student\",\n              children: \"Student\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"graduate\",\n              children: \"Graduate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"employee\",\n              children: \"Employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formBasicCategory\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Addtional Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Enter additional information\",\n            value: editCategory,\n            onChange: e => setEditCategory(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formImage\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Image URL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.File, {\n            type: \"text\",\n            value: editImage,\n            onChange: e => setEditImage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 9\n        }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => setSelectedUser(null),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Info, \"JD8bcGW55nH+atnhyFej197LsIk=\");\n_c = Info;\nvar _c;\n$RefreshReg$(_c, \"Info\");","map":{"version":3,"names":["useState","useEffect","Axios","Container","Table","Button","DropdownButton","Dropdown","Form","moment","jsxDEV","_jsxDEV","Fragment","_Fragment","Info","_s","api","users","setUsers","selectedType","setSelectedType","selectedUsers","setSelectedUsers","selectedUser","setSelectedUser","editName","setEditName","editEmail","setEditEmail","editPhone","setEditPhone","editType","setEditType","editCategory","setEditCategory","editImage","setEditImage","selectedFile","setSelectedFile","get","then","res","data","openImage","image","window","open","handleTypeSelect","type","handleCheckboxSelect","id","includes","filter","userId","filteredUsers","user","deleteSelectedUsers","delete","ids","_id","handleEdit","find","name","email","phone","category","employeeType","date","format","handleNameChange","e","target","value","handleEmailChange","handlePhoneChange","handleTypeChange","handleCategoryChange","handleFileSelect","files","handleFileUpload","formData","FormData","append","post","url","handleSubmit","preventDefault","put","map","children","className","title","Item","onClick","fileName","_jsxFileName","lineNumber","columnNumber","striped","bordered","hover","Check","onChange","checked","variant","length","onSubmit","Group","controlId","Label","Control","as","placeholder","File","_c","$RefreshReg$"],"sources":["C:/Users/samah/OneDrive/Desktop/mernproject/client/src/Info.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Axios from \"axios\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  Container,\r\n  Table,\r\n  Button,\r\n  DropdownButton,\r\n  Dropdown,\r\n  Form,\r\n} from \"react-bootstrap\";\r\nimport moment from 'moment';\r\n\r\n/**\r\n * Component to display user information\r\n */\r\nexport default function Info() {\r\n  const api = \"http://127.0.0.1:3001\";\r\n\r\n  const [users, setUsers] = useState([]); // State variable to store user data\r\n  const [selectedType, setSelectedType] = useState(\"all\"); // State variable to store the currently selected user type\r\n  const [selectedUsers, setSelectedUsers] = useState([]); // State variable to store the currently selected users to delete\r\n  const [selectedUser, setSelectedUser] = useState(null); // State variable to store the ID of the user being edited\r\n  const [editName, setEditName] = useState(\"\");\r\n  const [editEmail, setEditEmail] = useState(\"\");\r\n  const [editPhone, setEditPhone] = useState(\"\");\r\n  const [editType, setEditType] = useState(\"\");\r\n\r\n  const [editCategory, setEditCategory] = useState(\"\");\r\n\r\n  const [editImage, setEditImage] = useState(null);\r\n  const [selectedFile, setSelectedFile] = useState(null); // State variable to store the selected image file\r\n\r\n  useEffect(() => {\r\n    Axios.get(`${api}/users`).then((res) => { // Send GET request to /users endpoint to retrieve user data\r\n      setUsers(res.data); // Update state variable with retrieved data\r\n    });\r\n  }, []);\r\n\r\n  /**\r\n   * Function to open image URL in a new window\r\n   * @param imageUrl - URL of the image to open\r\n   */\r\n  const openImage = (image) => {\r\n    window.open(image, \"_blank\"); // Open image URL in a new window when user clicks \"View Image\" button\r\n  };\r\n\r\n  /**\r\n   * Function to handle user type selection from dropdown menu\r\n   * @param type - Selected user type\r\n   */\r\n  const handleTypeSelect = (type) => {\r\n    setSelectedType(type); // Update state variable with the selected user type\r\n  };\r\n  \r\n  /**\r\n   * Function to handle checkbox selection\r\n   * @param id - ID of the user to select or deselect\r\n   */\r\n  const handleCheckboxSelect = (id) => {\r\n    if (selectedUsers.includes(id)) {\r\n      setSelectedUsers(selectedUsers.filter((userId) => userId !== id)); // remove user from the selected users array if it is already selected\r\n    } else {\r\n      setSelectedUsers([...selectedUsers, id]); // add user to the selected users array if it is not already selected\r\n    }\r\n  };\r\n\r\n  const filteredUsers =\r\n    selectedType === \"all\"\r\n      ? users\r\n      : users.filter((user) => user.type === selectedType); // Filter user data based on selected user type\r\n\r\n  /**\r\n   * Function to delete selected users from the table and the database\r\n   */\r\n  const deleteSelectedUsers = () => {\r\n    Axios.delete(`${api}/users`, { data: { ids: selectedUsers } }).then((res) => { // Send DELETE request to /users endpoint to delete selected users from the database\r\n      setUsers(users.filter((user) => !selectedUsers.includes(user._id))); // Update state variable with updated user data after deletion\r\n      setSelectedUsers([]);\r\n    });\r\n  };\r\n\r\n \r\n  /**\r\n   * Function to handle editing user information\r\n   * @param id - ID of the user being edited\r\n   */\r\n  const handleEdit = (id) => {\r\n    setSelectedUser(id); // Set the ID of the user being edited\r\n    const user = users.find((user) => user._id === id); // Find the user data for the selected user\r\n    setEditName(user.name);\r\n    setEditEmail(user.email);\r\n    setEditPhone(user.phone);\r\n    setEditType(user.type);\r\n    setEditCategory(user.category || user.employeeType || moment(user.date).format('MM/DD/YYYY'));\r\n    setEditImage(null); // Reset the image field to null\r\n  };\r\n\r\n  /**\r\n   * Function to handle changes to the name field in the edit form\r\n   * @param e - Event object\r\n   */\r\n  const handleNameChange = (e) => {\r\n    setEditName(e.target.value); // Update state variable with the new name value\r\n  };\r\n\r\n  /**\r\n   * Function to handle changes to the email field in the edit form\r\n   * @param e - Event object\r\n   */\r\n  const handleEmailChange = (e) => {\r\n    setEditEmail(e.target.value); // Update state variable with the new email value\r\n  };\r\n\r\n  /**\r\n   * Function to handle changes to the phone field in the edit form\r\n   * @param e - Event object\r\n   */\r\n  const handlePhoneChange = (e) => {\r\n    setEditPhone(e.target.value); // Update state variable with the new phone value\r\n  };\r\n\r\n  /**\r\n   * Function to handle changes to the type field in the edit form\r\n   * @param e - Event object\r\n   */\r\n  const handleTypeChange = (e) => {\r\n    setEditType(e.target.value); // Update state variable with the new type value\r\n  };\r\n\r\n  /**\r\n   * Function to handle changes to the category field in the edit form\r\n   * @param e - Event object\r\n   */\r\n  const handleCategoryChange = (e) => {\r\n    setEditCategory(e.target.value); // Update state variable with the new category value\r\n  };\r\n\r\n  /**\r\n   * Function to handle image file selection\r\n   * @param e - Event object\r\n   */\r\n  const handleFileSelect = (e) => {\r\n    setSelectedFile(e.target.files[0]); // Update state variable with the selected image file\r\n  };\r\n\r\n  /**\r\n   * Function to handle image file upload\r\n   */\r\n  const handleFileUpload = () => {\r\n    const formData = new FormData(); // Create a new FormData object\r\n    formData.append(\"image\", selectedFile); // Append the selected image file to the form data\r\n    Axios.post(`${api}/upload`, formData).then((res) => { // Send POST request to /upload endpoint to upload the image file\r\n      setEditImage(res.data.url); // Update state variable with the URL of the uploaded image\r\n      setSelectedFile(null); // Reset the selected file state variable\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Function to handle submission of the edit form\r\n   * @param e - Event object\r\n   */\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    Axios.put(`${api}/users/${selectedUser}`, { // Send PUT request to /users/:id endpoint to update the user data\r\n      name: editName,\r\n      email: editEmail,\r\n      phone: editPhone,\r\n      type: editType,\r\n      category: editCategory,\r\n      image: editImage, // Pass the image URL to the server if it has been updated\r\n    }).then((res) => {\r\n      setUsers(users.map((user) => { // Update state variable with the updated user data\r\n        if (user._id === selectedUser) {\r\n          return res.data;\r\n        }\r\n        return user;\r\n      }));\r\n      setSelectedUser(null); // Reset the selected user state variable\r\n      setEditName(\"\");\r\n      setEditEmail(\"\");\r\n      setEditPhone(\"\");\r\n      setEditType(\"\");\r\n      setEditCategory(\"\");\r\n      setEditImage(null);\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <Container>\r\n        {/* Dropdown menu to filter users by type */}\r\n        <div className=\"my-3 d-flex justify-content-end\">\r\n          <DropdownButton\r\n            id=\"dropdown-basic-button\"\r\n            title={`Filter by Type: ${selectedType}`}\r\n          >\r\n            <Dropdown.Item onClick={() => handleTypeSelect(\"all\")}>\r\n              All\r\n            </Dropdown.Item>\r\n            <Dropdown.Item onClick={() => handleTypeSelect(\"student\")}>\r\n              Student\r\n            </Dropdown.Item>\r\n            <Dropdown.Item onClick={() => handleTypeSelect(\"graduate\")}>\r\n              Graduate\r\n            </Dropdown.Item>\r\n            <Dropdown.Item onClick={() => handleTypeSelect(\"employee\")}>\r\n              Employee\r\n            </Dropdown.Item>\r\n          </DropdownButton>\r\n        </div>\r\n\r\n        {/* Table to display user information */}\r\n        <Table striped bordered hover className=\"my-3\">\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                <Form.Check\r\n                  type=\"checkbox\"\r\n                  onChange={(e) => {\r\n                    if (e.target.checked) {\r\n                      setSelectedUsers(filteredUsers.map((user) => user._id)); // select all visible users if the \"Select All\" checkbox is checked\r\n                    } else {\r\n                      setSelectedUsers([]); // deselect all visible users if the \"Select All\" checkbox is unchecked\r\n                    }\r\n                  }}\r\n                />\r\n              </th>\r\n              <th>Name</th>\r\n              <th>Email</th>\r\n              <th>Phone</th>\r\n              <th>Type</th>\r\n              <th>Addtional Information</th>\r\n              <th>Image</th>\r\n              <th>Actions</th> {/* Add a new column for edit and delete buttons */}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {filteredUsers.map((user) => (\r\n              <tr key={user._id}>\r\n                <td>\r\n                  <Form.Check\r\n                    type=\"checkbox\"\r\n                    checked={selectedUsers.includes(user._id)}\r\n                    onChange={() => handleCheckboxSelect(user._id)}\r\n                  />\r\n                </td>\r\n                <td>{user.name}</td>\r\n                <td>{user.email}</td>\r\n                <td>{user.phone}</td>\r\n                <td>{user.type}</td>\r\n                <td>{user.category || user.employeeType || moment(user.date).format('MM/DD/YYYY')}</td>\r\n                <td>\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    onClick={() => openImage(user.image)}\r\n                  >\r\n                    View Image\r\n                  </Button>{\" \"}\r\n                </td>\r\n                <td>\r\n                  <Button variant=\"warning\" onClick={() => handleEdit(user._id)}>Edit</Button>{\" \"}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n\r\n        {/* Button to delete selected users */}\r\n        {selectedUsers.length > 0 && (\r\n          <Button variant=\"danger\" onClick={deleteSelectedUsers}>\r\n            Delete Selected Users\r\n          </Button>\r\n        )}\r\n\r\n        {/* Edit user form */}\r\n        {selectedUser && (\r\n          <Form onSubmit={handleSubmit}>\r\n            <Form.Group controlId=\"formName\">\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                value={editName}\r\n                onChange={(e) => setEditName(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formEmail\">\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                value={editEmail}\r\n                onChange={(e) => setEditEmail(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formPhone\">\r\n              <Form.Label>Phone</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                value={editPhone}\r\n                onChange={(e) => setEditPhone(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formType\">\r\n              <Form.Label>Type</Form.Label>\r\n              <Form.Control as=\"select\"\r\n            value={editType}\r\n            onChange={(e) => setEditType(e.target.value)}\r\n          >\r\n            <option value=\"student\">Student</option>\r\n            <option value=\"graduate\">Graduate</option>\r\n            <option value=\"employee\">Employee</option>\r\n          </Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicCategory\">\r\n        <Form.Label>Addtional Information</Form.Label>\r\n                      <Form.Control\r\n                        type=\"text\"\r\n                        placeholder=\"Enter additional information\"\r\n                        value={editCategory}\r\n                        onChange={(e) => setEditCategory(e.target.value)}\r\n                      />\r\n                    </Form.Group>\r\n\r\n        <Form.Group controlId=\"formImage\">\r\n          <Form.Label>Image URL</Form.Label>\r\n          <Form.File\r\n            type=\"text\"\r\n            value={editImage}\r\n            onChange={(e) => setEditImage(e.target.value)}\r\n          />\r\n          \r\n        </Form.Group>\r\n\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Save\r\n        </Button>{\" \"}\r\n        <Button variant=\"secondary\" onClick={() => setSelectedUser(null)}>\r\n          Cancel\r\n        </Button>\r\n      </Form>\r\n    )}\r\n  </Container>\r\n</>\r\n  );}"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAClB,OAAO,sCAAsC;AAC7C,SACEC,SAAS,EACTC,KAAK,EACLC,MAAM,EACNC,cAAc,EACdC,QAAQ,EACRC,IAAI,QACC,iBAAiB;AACxB,OAAOC,MAAM,MAAM,QAAQ;;AAE3B;AACA;AACA;AAFA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAGA,eAAe,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAMC,GAAG,GAAG,uBAAuB;EAEnC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACzD,MAAM,CAACqB,aAAa,EAAEC,gBAAgB,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxD,MAAM,CAACuB,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxD,MAAM,CAACyB,QAAQ,EAAEC,WAAW,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC2B,SAAS,EAAEC,YAAY,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC6B,SAAS,EAAEC,YAAY,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC+B,QAAQ,EAAEC,WAAW,CAAC,GAAGhC,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAM,CAACiC,YAAY,EAAEC,eAAe,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAM,CAACmC,SAAS,EAAEC,YAAY,CAAC,GAAGpC,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACqC,YAAY,EAAEC,eAAe,CAAC,GAAGtC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAExDC,SAAS,CAAC,MAAM;IACdC,KAAK,CAACqC,GAAG,CAAE,GAAEvB,GAAI,QAAO,CAAC,CAACwB,IAAI,CAAEC,GAAG,IAAK;MAAE;MACxCvB,QAAQ,CAACuB,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;IACtB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;AACA;EACE,MAAMC,SAAS,GAAIC,KAAK,IAAK;IAC3BC,MAAM,CAACC,IAAI,CAACF,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;EAChC,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMG,gBAAgB,GAAIC,IAAI,IAAK;IACjC5B,eAAe,CAAC4B,IAAI,CAAC,CAAC,CAAC;EACzB,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMC,oBAAoB,GAAIC,EAAE,IAAK;IACnC,IAAI7B,aAAa,CAAC8B,QAAQ,CAACD,EAAE,CAAC,EAAE;MAC9B5B,gBAAgB,CAACD,aAAa,CAAC+B,MAAM,CAAEC,MAAM,IAAKA,MAAM,KAAKH,EAAE,CAAC,CAAC,CAAC,CAAC;IACrE,CAAC,MAAM;MACL5B,gBAAgB,CAAC,CAAC,GAAGD,aAAa,EAAE6B,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5C;EACF,CAAC;;EAED,MAAMI,aAAa,GACjBnC,YAAY,KAAK,KAAK,GAClBF,KAAK,GACLA,KAAK,CAACmC,MAAM,CAAEG,IAAI,IAAKA,IAAI,CAACP,IAAI,KAAK7B,YAAY,CAAC,CAAC,CAAC;;EAE1D;AACF;AACA;EACE,MAAMqC,mBAAmB,GAAGA,CAAA,KAAM;IAChCtD,KAAK,CAACuD,MAAM,CAAE,GAAEzC,GAAI,QAAO,EAAE;MAAE0B,IAAI,EAAE;QAAEgB,GAAG,EAAErC;MAAc;IAAE,CAAC,CAAC,CAACmB,IAAI,CAAEC,GAAG,IAAK;MAAE;MAC7EvB,QAAQ,CAACD,KAAK,CAACmC,MAAM,CAAEG,IAAI,IAAK,CAAClC,aAAa,CAAC8B,QAAQ,CAACI,IAAI,CAACI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACrErC,gBAAgB,CAAC,EAAE,CAAC;IACtB,CAAC,CAAC;EACJ,CAAC;;EAGD;AACF;AACA;AACA;EACE,MAAMsC,UAAU,GAAIV,EAAE,IAAK;IACzB1B,eAAe,CAAC0B,EAAE,CAAC,CAAC,CAAC;IACrB,MAAMK,IAAI,GAAGtC,KAAK,CAAC4C,IAAI,CAAEN,IAAI,IAAKA,IAAI,CAACI,GAAG,KAAKT,EAAE,CAAC,CAAC,CAAC;IACpDxB,WAAW,CAAC6B,IAAI,CAACO,IAAI,CAAC;IACtBlC,YAAY,CAAC2B,IAAI,CAACQ,KAAK,CAAC;IACxBjC,YAAY,CAACyB,IAAI,CAACS,KAAK,CAAC;IACxBhC,WAAW,CAACuB,IAAI,CAACP,IAAI,CAAC;IACtBd,eAAe,CAACqB,IAAI,CAACU,QAAQ,IAAIV,IAAI,CAACW,YAAY,IAAIzD,MAAM,CAAC8C,IAAI,CAACY,IAAI,CAAC,CAACC,MAAM,CAAC,YAAY,CAAC,CAAC;IAC7FhC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;EACtB,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMiC,gBAAgB,GAAIC,CAAC,IAAK;IAC9B5C,WAAW,CAAC4C,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EAC/B,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMC,iBAAiB,GAAIH,CAAC,IAAK;IAC/B1C,YAAY,CAAC0C,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EAChC,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAME,iBAAiB,GAAIJ,CAAC,IAAK;IAC/BxC,YAAY,CAACwC,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EAChC,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMG,gBAAgB,GAAIL,CAAC,IAAK;IAC9BtC,WAAW,CAACsC,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EAC/B,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMI,oBAAoB,GAAIN,CAAC,IAAK;IAClCpC,eAAe,CAACoC,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EACnC,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMK,gBAAgB,GAAIP,CAAC,IAAK;IAC9BhC,eAAe,CAACgC,CAAC,CAACC,MAAM,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtC,CAAC;;EAED;AACF;AACA;EACE,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACjCD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE7C,YAAY,CAAC,CAAC,CAAC;IACxCnC,KAAK,CAACiF,IAAI,CAAE,GAAEnE,GAAI,SAAQ,EAAEgE,QAAQ,CAAC,CAACxC,IAAI,CAAEC,GAAG,IAAK;MAAE;MACpDL,YAAY,CAACK,GAAG,CAACC,IAAI,CAAC0C,GAAG,CAAC,CAAC,CAAC;MAC5B9C,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;IACzB,CAAC,CAAC;EACJ,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAM+C,YAAY,GAAIf,CAAC,IAAK;IAC1BA,CAAC,CAACgB,cAAc,CAAC,CAAC;IAClBpF,KAAK,CAACqF,GAAG,CAAE,GAAEvE,GAAI,UAASO,YAAa,EAAC,EAAE;MAAE;MAC1CuC,IAAI,EAAErC,QAAQ;MACdsC,KAAK,EAAEpC,SAAS;MAChBqC,KAAK,EAAEnC,SAAS;MAChBmB,IAAI,EAAEjB,QAAQ;MACdkC,QAAQ,EAAEhC,YAAY;MACtBW,KAAK,EAAET,SAAS,CAAE;IACpB,CAAC,CAAC,CAACK,IAAI,CAAEC,GAAG,IAAK;MACfvB,QAAQ,CAACD,KAAK,CAACuE,GAAG,CAAEjC,IAAI,IAAK;QAAE;QAC7B,IAAIA,IAAI,CAACI,GAAG,KAAKpC,YAAY,EAAE;UAC7B,OAAOkB,GAAG,CAACC,IAAI;QACjB;QACA,OAAOa,IAAI;MACb,CAAC,CAAC,CAAC;MACH/B,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;MACvBE,WAAW,CAAC,EAAE,CAAC;MACfE,YAAY,CAAC,EAAE,CAAC;MAChBE,YAAY,CAAC,EAAE,CAAC;MAChBE,WAAW,CAAC,EAAE,CAAC;MACfE,eAAe,CAAC,EAAE,CAAC;MACnBE,YAAY,CAAC,IAAI,CAAC;IACpB,CAAC,CAAC;EACJ,CAAC;EACD,oBACEzB,OAAA,CAAAE,SAAA;IAAA4E,QAAA,eACE9E,OAAA,CAACR,SAAS;MAAAsF,QAAA,gBAER9E,OAAA;QAAK+E,SAAS,EAAC,iCAAiC;QAAAD,QAAA,eAC9C9E,OAAA,CAACL,cAAc;UACb4C,EAAE,EAAC,uBAAuB;UAC1ByC,KAAK,EAAG,mBAAkBxE,YAAa,EAAE;UAAAsE,QAAA,gBAEzC9E,OAAA,CAACJ,QAAQ,CAACqF,IAAI;YAACC,OAAO,EAAEA,CAAA,KAAM9C,gBAAgB,CAAC,KAAK,CAAE;YAAA0C,QAAA,EAAC;UAEvD;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAe,CAAC,eAChBtF,OAAA,CAACJ,QAAQ,CAACqF,IAAI;YAACC,OAAO,EAAEA,CAAA,KAAM9C,gBAAgB,CAAC,SAAS,CAAE;YAAA0C,QAAA,EAAC;UAE3D;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAe,CAAC,eAChBtF,OAAA,CAACJ,QAAQ,CAACqF,IAAI;YAACC,OAAO,EAAEA,CAAA,KAAM9C,gBAAgB,CAAC,UAAU,CAAE;YAAA0C,QAAA,EAAC;UAE5D;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAe,CAAC,eAChBtF,OAAA,CAACJ,QAAQ,CAACqF,IAAI;YAACC,OAAO,EAAEA,CAAA,KAAM9C,gBAAgB,CAAC,UAAU,CAAE;YAAA0C,QAAA,EAAC;UAE5D;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAe,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACd,CAAC,eAGNtF,OAAA,CAACP,KAAK;QAAC8F,OAAO;QAACC,QAAQ;QAACC,KAAK;QAACV,SAAS,EAAC,MAAM;QAAAD,QAAA,gBAC5C9E,OAAA;UAAA8E,QAAA,eACE9E,OAAA;YAAA8E,QAAA,gBACE9E,OAAA;cAAA8E,QAAA,eACE9E,OAAA,CAACH,IAAI,CAAC6F,KAAK;gBACTrD,IAAI,EAAC,UAAU;gBACfsD,QAAQ,EAAGhC,CAAC,IAAK;kBACf,IAAIA,CAAC,CAACC,MAAM,CAACgC,OAAO,EAAE;oBACpBjF,gBAAgB,CAACgC,aAAa,CAACkC,GAAG,CAAEjC,IAAI,IAAKA,IAAI,CAACI,GAAG,CAAC,CAAC,CAAC,CAAC;kBAC3D,CAAC,MAAM;oBACLrC,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;kBACxB;gBACF;cAAE;gBAAAwE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACH;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA,CAAC,eACLtF,OAAA;cAAA8E,QAAA,EAAI;YAAI;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACbtF,OAAA;cAAA8E,QAAA,EAAI;YAAK;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACdtF,OAAA;cAAA8E,QAAA,EAAI;YAAK;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACdtF,OAAA;cAAA8E,QAAA,EAAI;YAAI;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACbtF,OAAA;cAAA8E,QAAA,EAAI;YAAqB;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC9BtF,OAAA;cAAA8E,QAAA,EAAI;YAAK;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACdtF,OAAA;cAAA8E,QAAA,EAAI;YAAO;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,KAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACf;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACRtF,OAAA;UAAA8E,QAAA,EACGnC,aAAa,CAACkC,GAAG,CAAEjC,IAAI,iBACtB5C,OAAA;YAAA8E,QAAA,gBACE9E,OAAA;cAAA8E,QAAA,eACE9E,OAAA,CAACH,IAAI,CAAC6F,KAAK;gBACTrD,IAAI,EAAC,UAAU;gBACfuD,OAAO,EAAElF,aAAa,CAAC8B,QAAQ,CAACI,IAAI,CAACI,GAAG,CAAE;gBAC1C2C,QAAQ,EAAEA,CAAA,KAAMrD,oBAAoB,CAACM,IAAI,CAACI,GAAG;cAAE;gBAAAmC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAChD;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA,CAAC,eACLtF,OAAA;cAAA8E,QAAA,EAAKlC,IAAI,CAACO;YAAI;cAAAgC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACpBtF,OAAA;cAAA8E,QAAA,EAAKlC,IAAI,CAACQ;YAAK;cAAA+B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACrBtF,OAAA;cAAA8E,QAAA,EAAKlC,IAAI,CAACS;YAAK;cAAA8B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACrBtF,OAAA;cAAA8E,QAAA,EAAKlC,IAAI,CAACP;YAAI;cAAA8C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACpBtF,OAAA;cAAA8E,QAAA,EAAKlC,IAAI,CAACU,QAAQ,IAAIV,IAAI,CAACW,YAAY,IAAIzD,MAAM,CAAC8C,IAAI,CAACY,IAAI,CAAC,CAACC,MAAM,CAAC,YAAY;YAAC;cAAA0B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACvFtF,OAAA;cAAA8E,QAAA,gBACE9E,OAAA,CAACN,MAAM;gBACLmG,OAAO,EAAC,SAAS;gBACjBX,OAAO,EAAEA,CAAA,KAAMlD,SAAS,CAACY,IAAI,CAACX,KAAK,CAAE;gBAAA6C,QAAA,EACtC;cAED;gBAAAK,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,EAAC,GAAG;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACX,CAAC,eACLtF,OAAA;cAAA8E,QAAA,gBACE9E,OAAA,CAACN,MAAM;gBAACmG,OAAO,EAAC,SAAS;gBAACX,OAAO,EAAEA,CAAA,KAAMjC,UAAU,CAACL,IAAI,CAACI,GAAG,CAAE;gBAAA8B,QAAA,EAAC;cAAI;gBAAAK,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,EAAC,GAAG;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9E,CAAC;UAAA,GAvBE1C,IAAI,CAACI,GAAG;YAAAmC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAwBb,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,EAGP5E,aAAa,CAACoF,MAAM,GAAG,CAAC,iBACvB9F,OAAA,CAACN,MAAM;QAACmG,OAAO,EAAC,QAAQ;QAACX,OAAO,EAAErC,mBAAoB;QAAAiC,QAAA,EAAC;MAEvD;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACT,EAGA1E,YAAY,iBACXZ,OAAA,CAACH,IAAI;QAACkG,QAAQ,EAAErB,YAAa;QAAAI,QAAA,gBAC3B9E,OAAA,CAACH,IAAI,CAACmG,KAAK;UAACC,SAAS,EAAC,UAAU;UAAAnB,QAAA,gBAC9B9E,OAAA,CAACH,IAAI,CAACqG,KAAK;YAAApB,QAAA,EAAC;UAAI;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eAC7BtF,OAAA,CAACH,IAAI,CAACsG,OAAO;YACX9D,IAAI,EAAC,MAAM;YACXwB,KAAK,EAAE/C,QAAS;YAChB6E,QAAQ,EAAGhC,CAAC,IAAK5C,WAAW,CAAC4C,CAAC,CAACC,MAAM,CAACC,KAAK;UAAE;YAAAsB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9C,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACQ,CAAC,eAEbtF,OAAA,CAACH,IAAI,CAACmG,KAAK;UAACC,SAAS,EAAC,WAAW;UAAAnB,QAAA,gBAC/B9E,OAAA,CAACH,IAAI,CAACqG,KAAK;YAAApB,QAAA,EAAC;UAAa;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eACtCtF,OAAA,CAACH,IAAI,CAACsG,OAAO;YACX9D,IAAI,EAAC,OAAO;YACZwB,KAAK,EAAE7C,SAAU;YACjB2E,QAAQ,EAAGhC,CAAC,IAAK1C,YAAY,CAAC0C,CAAC,CAACC,MAAM,CAACC,KAAK;UAAE;YAAAsB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/C,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACQ,CAAC,eAEbtF,OAAA,CAACH,IAAI,CAACmG,KAAK;UAACC,SAAS,EAAC,WAAW;UAAAnB,QAAA,gBAC/B9E,OAAA,CAACH,IAAI,CAACqG,KAAK;YAAApB,QAAA,EAAC;UAAK;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eAC9BtF,OAAA,CAACH,IAAI,CAACsG,OAAO;YACX9D,IAAI,EAAC,MAAM;YACXwB,KAAK,EAAE3C,SAAU;YACjByE,QAAQ,EAAGhC,CAAC,IAAKxC,YAAY,CAACwC,CAAC,CAACC,MAAM,CAACC,KAAK;UAAE;YAAAsB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/C,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACQ,CAAC,eAEbtF,OAAA,CAACH,IAAI,CAACmG,KAAK;UAACC,SAAS,EAAC,UAAU;UAAAnB,QAAA,gBAC9B9E,OAAA,CAACH,IAAI,CAACqG,KAAK;YAAApB,QAAA,EAAC;UAAI;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eAC7BtF,OAAA,CAACH,IAAI,CAACsG,OAAO;YAACC,EAAE,EAAC,QAAQ;YAC3BvC,KAAK,EAAEzC,QAAS;YAChBuE,QAAQ,EAAGhC,CAAC,IAAKtC,WAAW,CAACsC,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;YAAAiB,QAAA,gBAE7C9E,OAAA;cAAQ6D,KAAK,EAAC,SAAS;cAAAiB,QAAA,EAAC;YAAO;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACxCtF,OAAA;cAAQ6D,KAAK,EAAC,UAAU;cAAAiB,QAAA,EAAC;YAAQ;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC1CtF,OAAA;cAAQ6D,KAAK,EAAC,UAAU;cAAAiB,QAAA,EAAC;YAAQ;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eAEbtF,OAAA,CAACH,IAAI,CAACmG,KAAK;UAACC,SAAS,EAAC,mBAAmB;UAAAnB,QAAA,gBACzC9E,OAAA,CAACH,IAAI,CAACqG,KAAK;YAAApB,QAAA,EAAC;UAAqB;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eAChCtF,OAAA,CAACH,IAAI,CAACsG,OAAO;YACX9D,IAAI,EAAC,MAAM;YACXgE,WAAW,EAAC,8BAA8B;YAC1CxC,KAAK,EAAEvC,YAAa;YACpBqE,QAAQ,EAAGhC,CAAC,IAAKpC,eAAe,CAACoC,CAAC,CAACC,MAAM,CAACC,KAAK;UAAE;YAAAsB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACQ,CAAC,eAEzBtF,OAAA,CAACH,IAAI,CAACmG,KAAK;UAACC,SAAS,EAAC,WAAW;UAAAnB,QAAA,gBAC/B9E,OAAA,CAACH,IAAI,CAACqG,KAAK;YAAApB,QAAA,EAAC;UAAS;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eAClCtF,OAAA,CAACH,IAAI,CAACyG,IAAI;YACRjE,IAAI,EAAC,MAAM;YACXwB,KAAK,EAAErC,SAAU;YACjBmE,QAAQ,EAAGhC,CAAC,IAAKlC,YAAY,CAACkC,CAAC,CAACC,MAAM,CAACC,KAAK;UAAE;YAAAsB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/C,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEQ,CAAC,eAEbtF,OAAA,CAACN,MAAM;UAACmG,OAAO,EAAC,SAAS;UAACxD,IAAI,EAAC,QAAQ;UAAAyC,QAAA,EAAC;QAExC;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EAAC,GAAG,eACbtF,OAAA,CAACN,MAAM;UAACmG,OAAO,EAAC,WAAW;UAACX,OAAO,EAAEA,CAAA,KAAMrE,eAAe,CAAC,IAAI,CAAE;UAAAiE,QAAA,EAAC;QAElE;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CACP;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACQ;EAAC,gBACZ,CAAC;AACC;AAAClF,EAAA,CA1UmBD,IAAI;AAAAoG,EAAA,GAAJpG,IAAI;AAAA,IAAAoG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}